#!/bin/sh
SCRIPTVERSION="1.4"
#this is the PROD release for TSC helper script
BETA=false
SCRIPTURL=" https://raw.githubusercontent.com/IgorYbema/tscSettings/master"
RESOURCESURL="http://qutility.nl/resourcefiles"

# load a sane environment
. /etc/profile

ROUNDWAIT=5
UPDATECHECKINTERVAL=86400
STARTTIME=`date +%s`
LASTTIMEWLPM=`date +%s` 
LASTUPDATECHECK=0
COMMANDFILE=/tmp/tsc.command


checkSelfUpdate() {
        CURRENTIME=`date +%s`
	MD5TSCONLINE=`curl -Nks -A "$HOSTNAME:$SCRIPTVERSION" $SCRIPTURL/tsc.md5?$CURRENTTIME | cut -d\  -f1`
	MD5TSCNOW=`/usr/bin/md5sum /usr/bin/tsc | cut -d\  -f1`
	if [ !  "$MD5TSCNOW" == "$MD5TSCONLINE" ] && [ -n "$MD5TSCONLINE" ]
	then
		echo "There is a new version of the TSC script available. Updating and restarting!"
		CHECKRESULT=true
		/usr/bin/curl -Nks $SCRIPTURL/tsc -o /usr/bin/tsc.new
		MD5TSCNOW=`/usr/bin/md5sum /usr/bin/tsc.new | cut -d\  -f1`
		if [ "$MD5TSCNOW" == "$MD5TSCONLINE" ]
		then
			echo "Download ok! Replacing myself and restarting."
			mv /usr/bin/tsc.new /usr/bin/tsc
			chmod +x /usr/bin/tsc
			/qmf/bin/bxt -d :happ_usermsg -s Notification -n CreateNotification -a type -v tsc -a subType -v notify -a text -v "Er is een nieuwe TSC support script gedownload. Script is gerestart." >/dev/null 2>&1
			sleep 5
			killall -9 tsc
			exit
		else
			echo "Download failed. Trying next time."
		fi
	fi
}

checkResourceFiles() {
	UPDATEAVAILABLE=false
	VERSIONSAVAILABLE=`curl -Nks -A "$HOSTNAME:$SCRIPTVERSION" $RESOURCESURL/resource.file.versions`
	MD5NEW=`echo "$VERSIONSAVAILABLE" | grep $ARCH | grep $VERSION | grep base | cut -d\, -f4`
	MD5NOW=`/usr/bin/md5sum /qmf/qml/resources-static-base.rcc | cut -d\  -f1`
	if [ !  "$MD5NOW" == "$MD5NEW" ] && [ -n "$MD5NEW" ]
	then
		echo "Base resource file update available!"
		UPDATEAVAILABLE=true
	fi

	MD5NEW=`echo "$VERSIONSAVAILABLE" | grep $ARCH | grep $VERSION | grep ebl | cut -d\, -f4`
	MD5NOW=`/usr/bin/md5sum /qmf/qml/resources-static-ebl.rcc | cut -d\  -f1`
	if [ !  "$MD5NOW" == "$MD5NEW" ] && [ -n "$MD5NEW" ]
	then
		echo "EBL resource file update available!"
		UPDATEAVAILABLE=true
	fi
}

updateResourceFiles() {
	echo "Updating resource files!"

	RESOURCEFILEURL="$RESOURCESURL/resources-$ARCH-$VERSION.zip"
	/usr/bin/wget  $RESOURCEFILEURL -O /tmp/resources-$ARCH-$VERSION.zip -T 5 -t 2 -o /dev/null
	RESULT=$?

	if [ ! $RESULT == 0 ]
	then
		echo "Could not download new resources.rcc file for this version!" 
	else
		mv /qmf/qml/resources-static-base.rcc /qmf/qml/resources-static-base.rcc.backup
		mv /qmf/qml/resources-static-ebl.rcc /qmf/qml/resources-static-ebl.rcc.backup
		/usr/bin/unzip -oq /tmp/resources-$ARCH-$VERSION.zip -d /qmf/qml
		/qmf/bin/bxt -d :happ_usermsg -s Notification -n CreateNotification -a type -v tsc -a subType -v update -a text -v "Er is een TSC resource file update gedownload. Restart GUI aub" >/dev/null 2>&1
	fi
}

getVersion() {
	#determine current architecture
	if grep -q nxt /etc/opkg/arch.conf
	then
		ARCH="nxt"
	else
		ARCH="qb2"
	fi
	VERSION=`opkg list-installed base-$ARCH-\* | sed -r -e "s/base-$ARCH-([a-z]{3})\s-\s([0-9]*\.[0-9]*\.[0-9]*)-.*/\2/"`
	echo "Running $VERSION on a $ARCH"
}

checkUpdate() {
	CHECKRESULT=false
	checkSelfUpdate
	getVersion
	checkResourceFiles
	if [ "$UPDATEAVAILABLE" = true ] 
	then
		CHECKRESULT=true
		updateResourceFiles
	fi
	checkFirmware
	if [ "$CHECKRESULT" = false ] 
	then
		/qmf/bin/bxt -d :happ_usermsg -s Notification -n CreateNotification -a type -v tsc -a subType -v notify -a text -v "Er is geen TSC update gevonden" >/dev/null 2>&1
	fi
}

checkFirmware() {
	VERSIONS=`/usr/bin/curl -Nks "https://notepad.pw/raw/6fmm2o8ev" | /usr/bin/tr '\n\r' ' ' | /bin/grep STARTTOONVERSIONS | /bin/sed 's/.*#STARTTOONVERSIONS//' | /bin/sed 's/#ENDTOONVERSIONS.*//' | xargs`
	if [ "$VERSIONS" == "" ]
	then
		VERSIONS="4.19.10"
	fi
	LATESTVERSION=${VERSIONS##* }

        #determine current and next version levels and if it is allowed to upgrade to it
        CURVERS_MAJOR="`echo $VERSION | sed -n -r -e 's,([0-9]+).([0-9]+).([0-9]+),\1,p'`"
        CURVERS_MINOR="`echo $VERSION | sed -n -r -e 's,([0-9]+).([0-9]+).([0-9]+),\2,p'`"
        CURVERS_BUILD="`echo $VERSION | sed -n -r -e 's,([0-9]+).([0-9]+).([0-9]+),\3,p'`"
        VERS_MAJOR="`echo $LATESTVERSION | sed -n -r -e 's,([0-9]+).([0-9]+).([0-9]+),\1,p'`"
        VERS_MINOR="`echo $LATESTVERSION | sed -n -r -e 's,([0-9]+).([0-9]+).([0-9]+),\2,p'`"
        VERS_BUILD="`echo $LATESTVERSION | sed -n -r -e 's,([0-9]+).([0-9]+).([0-9]+),\3,p'`"

        if [ $VERS_MAJOR -gt $CURVERS_MAJOR ] || [ $VERS_MAJOR -eq $CURVERS_MAJOR -a $VERS_MINOR -gt $CURVERS_MINOR ] || [ $VERS_MAJOR -eq $CURVERS_MAJOR -a $VERS_MINOR -eq $CURVERS_MINOR -a $VERS_BUILD -gt $CURVERS_BUILD ]
	then
	 	#remove any left over last update file
		rm -f /tmp/update.status.vars

		CHECKRESULT=true
		/qmf/bin/bxt -d :happ_usermsg -s Notification -n CreateNotification -a type -v tsc -a subType -v firmware -a text -v "Er is nieuwe Toon firmware ($LATESTVERSION) beschikbaar!" >/dev/null 2>&1
	fi
}

flushFirewall() {
	echo "Flushing firewall rules"
	iptables -F
	/qmf/bin/bxt -d :happ_usermsg -s Notification -n CreateNotification -a type -v tsc -a subType -v firewall -a text -v "Firewall regels verwijderd" >/dev/null 2>&1
}

toonUpdate() {
	echo "Updating to latest Toon firmware"
	#first always get latest update script in unattended mode
	curl -Nks https://raw.githubusercontent.com/IgorYbema/update-rooted/master/update-rooted.sh -o /root/update-rooted.sh
	#then run the script unattended
	/bin/sh /root/update-rooted.sh -u > /var/log/tsc.toonupdate.log
}

toggleBeta() {
	#first remove command file as we don't want to switch forward and back all the time
	rm -f $COMMANDFILE
	if ($BETA)
	then
		echo "Switching to production releases"
		/qmf/bin/bxt -d :happ_usermsg -s Notification -n CreateNotification -a type -v tsc -a subType -v firewall -a text -v "TSC Productie releases geselecteerd" >/dev/null 2>&1
		#only need to change script url to production as self update will then fetch the production script and reload
		SCRIPTURL="https://raw.githubusercontent.com/IgorYbema/tscSettings/master"
		checkSelfUpdate
	else
		echo "Switching to beta releases"
		/qmf/bin/bxt -d :happ_usermsg -s Notification -n CreateNotification -a type -v tsc -a subType -v firewall -a text -v "TSC Beta releases geselecteerd" >/dev/null 2>&1
		#only need to change script url to beta as self update will then fetch the beta script and reload
		SCRIPTURL="http://qutility.nl/resourcefiles/beta"
		checkSelfUpdate
	fi
}



echo "Starting TSC support script (version $SCRIPTVERSION)"
while true
do
	STARTROUNDTIME=`date +%s`
	if [[ $(( $LASTUPDATECHECK + $UPDATECHECKINTERVAL )) -lt $STARTROUNDTIME ]]
	then
		echo "Checking for updates"
		LASTUPDATECHECK=$STARTROUNDTIME
		getVersion
		checkResourceFiles
		if [ "$UPDATEAVAILABLE" = true ] 
		then
			/qmf/bin/bxt -d :happ_usermsg -s Notification -n CreateNotification -a type -v tsc -a subType -v update -a text -v "Er is een TSC resource file update beschikbaar. Update via TSC menu aub" >/dev/null 2>&1
		fi
	fi

	if [ -s $COMMANDFILE ]
	then
		while IFS='' read -r line || [[ -n "$line" ]]; do
			echo "Command received: $line"
			case $line in
				flushfirewall)
					flushFirewall
					;;
				tscupdate)
					LASTUPDATECHECK=$STARTROUNDTIME
					checkUpdate
					;;
				toonupdate)
					toonUpdate
					;;
				togglebeta)
					toggleBeta	
					;;
				*) 	
					echo "Command not available: $line"
					;;	
			esac
		done < "$COMMANDFILE"
		rm -f $COMMANDFILE
	fi

	# at end of round do wifi fix if NXT and wait until next round
	if [ "$ARCH" == "nxt" ]
	then
		if [ `/sbin/wl PM` -ne 0 ]
		then
			echo "Wireless PM got changed again, last time fixed $((`date +%s` - $LASTTIMEWLPM )) seconds ago"
			/sbin/wl PM 0
			LASTTIMEWLPM=`date +%s` 
		fi
	fi
	WAITTIME=$(( $STARTROUNDTIME + $ROUNDWAIT - `date +%s` )) 
	if  [[ $WAITTIME -gt 0  ]]
	then
		sleep $WAITTIME
	fi
done

